#!/usr/bin/env bash

set -euo pipefail
unset OS_ACTIVITY_DT_MODE

if [ "$#" -eq 0 ]; then
    ssh 2>&1 | sed -e 's/usage: ssh/usage: it2ssh/' >&2
    exit 1
fi

function print_osc() {
    if [[ $TERM == screen* ]]; then
        printf "\033Ptmux;\033\033]"
    else
        printf "\033]"
    fi
}

# More of the tmux workaround described above.
function print_st() {
    if [[ $TERM == screen* ]]; then
        printf "\a\033\\"
    else
        printf "\a"
    fi
}

mkdir -p ~/.ssh/controlmasters
CONTROL_PATH="$HOME/.ssh/controlmasters/%r@%h:%p"

if command -v base64 > /dev/null 2> /dev/null; then
    base64_encode() { command base64 | command tr -d \\n\\r; }
    base64_decode() { command base64 -d; }
elif command -v b64encode > /dev/null 2> /dev/null; then
    base64_encode() { command b64encode - | command sed '1d;$d' | command tr -d \\n\\r; }
    base64_decode() { command fold -w 76 | command b64decode -r; }
elif detect_python; then
    pybase64() { command "$python" -c "import sys, base64; getattr(sys.stdout, 'buffer', sys.stdout).write(base64.standard_b64$1(getattr(sys.stdin, 'buffer', sys.stdin).read()))"; }
    base64_encode() { pybase64 "encode"; }
    base64_decode() { pybase64 "decode"; }
elif detect_perl; then
    base64_encode() { command "$perl" -MMIME::Base64 -0777 -ne 'print encode_base64($_)'; }
    base64_decode() { command "$perl" -MMIME::Base64 -ne 'print decode_base64($_)'; }
else
    die "base64 executable not present on local host"
fi

conductor="c2V0IC1ldW8gcGlwZWZhaWwKbG9naW5fc2hlbGw9IiIKc2hlbGxfbmFtZT0iIgpxdWl0PTAKcHl0aG9uX2RldGVjdGVkPSIwIgpwZXJsX2RldGVjdGVkPSIwIgpleGVjX3NoZWxsPTAKcnVuX2NtZD0wCnJ1bl9weXRob249MApzdHR5X3NldHRpbmdzPSQoY29tbWFuZCBzdHR5IC1nKQpjbGVhbnVwKCkgewogIGNvbW1hbmQgc3R0eSAiJHN0dHlfc2V0dGluZ3MiCn0KZGllKCkgewogICAgbG9nIGRpZSAiJCoiCiAgICBwcmludGYgIlwwMzNbMzFtJXNcMDMzW21cblxyIiAiJCoiID4gL2Rldi9zdGRlcnIKICAgIGNsZWFudXAKICAgIGV4aXQgMQp9Cml0MnNzaF92ZXJib3NlPTAKbG9nKCkgewogICAgaWYgW1sgJGl0MnNzaF92ZXJib3NlID09IDAgXV07IHRoZW4KICAgICAgICByZXR1cm4KICAgIGZpCiAgICBwcmludGYgIlskJF0gJXM6ICVzXG4iICQoZGF0ZSArJUg6JU06JVMpICIkKiIgPj4gL3RtcC9pdDJzc2gubG9nCn0KcHJpbnRfZGNzKCkgewogICAgbG9jYWwgdG9rZW49JDEKICAgIGxvY2FsIHVuaXF1ZWlkPSQyCiAgICBsb2NhbCBib29sYXJncz0kMwogICAgbG9jYWwgc3NoYXJncz0kNAogICAgbG9nIG9zYyBwcmludF9kY3MgJDEgJDIgJDMgJDQKICAgIHByaW50ZiAiXDAzM1AyMDAwcCIKICAgIHByaW50ZiAiJXMgJXMgJXMgLSAlc1xuIiAiJHt0b2tlbn0iICIke3VuaXF1ZWlkfSIgIiR7Ym9vbGFyZ3N9IiAiJHtzc2hhcmdzfSIKfQpmaXJzdF93b3JkKCkgewogICAgbG9jYWwgaW5wdXQ9IiQxIgogICAgcHJpbnRmICIlcyIgJHtpbnB1dCUlICp9Cn0KZHJvcF9maXJzdF93b3JkKCkgewogICAgbG9jYWwgaW5wdXQ9IiQxIgogICAgbG9nIGRyb3AgZmlyc3Qgd29yZCBmcm9tOiAiJGlucHV0IgogICAgcHJpbnRmICIlcyIgIiR7aW5wdXQjKiB9Igp9CmlmIGNvbW1hbmQgLXYgYmFzZTY0ID4gL2Rldi9udWxsIDI+IC9kZXYvbnVsbDsgdGhlbgogICAgbG9nICJmb3VuZCBiYXNlNjQgY29tbWFuZCIKICAgIGJhc2U2NF9lbmNvZGUoKSB7IGNvbW1hbmQgYmFzZTY0IHwgY29tbWFuZCB0ciAtZCBcXG5cXHI7IH0KICAgIGJhc2U2NF9kZWNvZGUoKSB7IGNvbW1hbmQgYmFzZTY0IC1kOyB9CmVsaWYgY29tbWFuZCAtdiBiNjRlbmNvZGUgPiAvZGV2L251bGwgMj4gL2Rldi9udWxsOyB0aGVuCiAgICBsb2cgImZvdW5kIGI2NGVuY29kZSwgYjY0ZGVjb2RlIGNvbW1hbmRzIgogICAgYmFzZTY0X2VuY29kZSgpIHsgY29tbWFuZCBiNjRlbmNvZGUgLSB8IGNvbW1hbmQgc2VkICcxZDskZCcgfCBjb21tYW5kIHRyIC1kIFxcblxccjsgfQogICAgYmFzZTY0X2RlY29kZSgpIHsgY29tbWFuZCBmb2xkIC13IDc2IHwgY29tbWFuZCBiNjRkZWNvZGUgLXI7IH0KZWxpZiBkZXRlY3RfcHl0aG9uOyB0aGVuCiAgICBsb2cgInVzaW5nIHB5dGhvbiBmb3IgYmFzZTY0IgogICAgcHliYXNlNjQoKSB7IGNvbW1hbmQgIiRweXRob24iIC1jICJpbXBvcnQgc3lzLCBiYXNlNjQ7IGdldGF0dHIoc3lzLnN0ZG91dCwgJ2J1ZmZlcicsIHN5cy5zdGRvdXQpLndyaXRlKGJhc2U2NC5zdGFuZGFyZF9iNjQkMShnZXRhdHRyKHN5cy5zdGRpbiwgJ2J1ZmZlcicsIHN5cy5zdGRpbikucmVhZCgpKSkiOyB9CiAgICBiYXNlNjRfZW5jb2RlKCkgeyBweWJhc2U2NCAiZW5jb2RlIjsgfQogICAgYmFzZTY0X2RlY29kZSgpIHsgcHliYXNlNjQgImRlY29kZSI7IH0KZWxpZiBkZXRlY3RfcGVybDsgdGhlbgogICAgbG9nICJ1c2luZyBwZXJsIGZvciBiYXNlNjQiCiAgICBiYXNlNjRfZW5jb2RlKCkgeyBjb21tYW5kICIkcGVybCIgLU1NSU1FOjpCYXNlNjQgLTA3NzcgLW5lICdwcmludCBlbmNvZGVfYmFzZTY0KCRfKSc7IH0KICAgIGJhc2U2NF9kZWNvZGUoKSB7IGNvbW1hbmQgIiRwZXJsIiAtTU1JTUU6OkJhc2U2NCAtbmUgJ3ByaW50IGRlY29kZV9iYXNlNjQoJF8pJzsgfQplbHNlCiAgICBkaWUgImJhc2U2NCBleGVjdXRhYmxlIG5vdCBwcmVzZW50IG9uIHJlbW90ZSBob3N0IgpmaQpwYXJzZV9wYXNzd2RfcmVjb3JkKCkgewogICAgcHJpbnRmICIlcyIgIiQoY29tbWFuZCBncmVwIC1vICdbXjpdKiQnKSIKfQpsb2dpbl9zaGVsbF9pc19vaygpIHsKICAgIGxvZyBsb2dpbl9zaGVsbF9pc19vawogICAgWyAtbiAiJDEiIF0gJiYgbG9naW5fc2hlbGw9JChlY2hvICQxIHwgcGFyc2VfcGFzc3dkX3JlY29yZCkKICAgIFsgLW4gIiRsb2dpbl9zaGVsbCIgLWEgLXggIiRsb2dpbl9zaGVsbCIgXSAmJiByZXR1cm4gMAogICAgbG9nICJsb2dpbiBzaGVsbCBvZiAkbG9naW5fc2hlbGwgaXMgb2siCiAgICByZXR1cm4gMQp9CnVzaW5nX2dldGVudCgpIHsKICAgIGNtZD0kKGNvbW1hbmQgLXYgZ2V0ZW50KSAmJiBbIC1uICIkY21kIiBdICYmIG91dHB1dD0kKGNvbW1hbmQgIiRjbWQiIHBhc3N3ZCAiJFVTRVIiIDI+L2Rldi9udWxsKSBcCiAgICAmJiBsb2dpbl9zaGVsbF9pc19vayAiJG91dHB1dCIKfQp1c2luZ19pZCgpIHsKICAgIGNtZD0kKGNvbW1hbmQgLXYgaWQpICYmIFsgLW4gIiRjbWQiIF0gJiYgb3V0cHV0PSQoY29tbWFuZCAiJGNtZCIgLVAgIiRVU0VSIiAyPi9kZXYvbnVsbCkgXAogICAgJiYgbG9naW5fc2hlbGxfaXNfb2sgIiRvdXRwdXQiCn0KZGV0ZWN0X3B5dGhvbigpIHsKICAgIGlmIFsgcHl0aG9uX2RldGVjdGVkID0gIjEiIF07IHRoZW4KICAgICAgICBbIC1uICIkcHl0aG9uIiBdICYmIHJldHVybiAwCiAgICAgICAgcmV0dXJuIDEKICAgIGZpCiAgICBweXRob25fZGV0ZWN0ZWQ9IjEiCiAgICBweXRob249JChjb21tYW5kIC12IHB5dGhvbjMpCiAgICBbIC16ICIkcHl0aG9uIiBdICYmIHB5dGhvbj0kKGNvbW1hbmQgLXYgcHl0aG9uMikKICAgIFsgLXogIiRweXRob24iIF0gJiYgcHl0aG9uPSQoY29tbWFuZCAtdiBweXRob24pCiAgICBpZiBbIC16ICIkcHl0aG9uIiAtbyAhIC14ICIkcHl0aG9uIiBdOyB0aGVuIHB5dGhvbj0iIjsgcmV0dXJuIDE7IGZpCiAgICBsb2cgbm8gcHl0aG9uCiAgICByZXR1cm4gMAp9CnVzaW5nX3B5dGhvbigpIHsKICAgIGRldGVjdF9weXRob24gJiYgb3V0cHV0PSQoY29tbWFuZCAiJHB5dGhvbiIgLWMgImltcG9ydCBwd2QsIG9zOyBwcmludChwd2QuZ2V0cHd1aWQob3MuZ2V0ZXVpZCgpKS5wd19zaGVsbCkiKSBcCiAgICAmJiBsb2dpbl9zaGVsbD0iJG91dHB1dCIgJiYgbG9naW5fc2hlbGxfaXNfb2sKfQpkZXRlY3RfcGVybCgpIHsKICAgIGlmIFsgcGVybF9kZXRlY3RlZCA9ICIxIiBdOyB0aGVuCiAgICAgICAgWyAtbiAiJHBlcmwiIF0gJiYgcmV0dXJuIDAKICAgICAgICByZXR1cm4gMQogICAgZmkKICAgIHBlcmxfZGV0ZWN0ZWQ9IjEiCiAgICBwZXJsPSQoY29tbWFuZCAtdiBwZXJsKQogICAgaWYgWyAteiAiJHBlcmwiIC1vICEgLXggIiRwZXJsIiBdOyB0aGVuIHBlcmw9IiI7IHJldHVybiAxOyBmaQogICAgbG9nIG5vIHBlcmwKICAgIHJldHVybiAwCn0KdXNpbmdfcGVybCgpIHsKICAgIGRldGVjdF9wZXJsICYmIG91dHB1dD0kKGNvbW1hbmQgIiRwZXJsIiAtZSAnbXkgJHNoZWxsID0gKGdldHB3dWlkKCQ8KSlbOF07IHByaW50ICRzaGVsbCcpIFwKICAgICYmIGxvZ2luX3NoZWxsPSIkb3V0cHV0IiAmJiBsb2dpbl9zaGVsbF9pc19vawp9CnVzaW5nX3NoZWxsX2VudigpIHsKICAgIFsgLW4gIiRTSEVMTCIgXSAmJiBsb2dpbl9zaGVsbD0iJFNIRUxMIiAmJiBsb2dpbl9zaGVsbF9pc19vawp9Cmd1ZXNzX2xvZ2luX3NoZWxsKCkgewogICAgWyAtbiAiJGxvZ2luX3NoZWxsIiBdIHx8IHVzaW5nX2dldGVudCB8fCB1c2luZ19pZCB8fCB1c2luZ19weXRob24gfHwgdXNpbmdfcGVybCB8fCB1c2luZ19wYXNzd2QgfHwgdXNpbmdfc2hlbGxfZW52IHx8IGxvZ2luX3NoZWxsPSJzaCIKICAgIHByaW50ZiAiJXMiICR7bG9naW5fc2hlbGx9CiAgICBsb2cgbG9naW4gc2hlbGwgaXMgJHtsb2dpbl9zaGVsbH0KfQpleGVjdXRlX3dpdGhfcGVybCgpIHsKICAgIGlmIGRldGVjdF9wZXJsOyB0aGVuCiAgICAgICAgbG9nIGV4ZWN1dGUgbG9naW4gc2hlbGwgdXNpbmcgcGVybAogICAgICAgIGV4ZWMgIiRwZXJsIiAiLWUiICJleGVjIHsnJGxvZ2luX3NoZWxsJ30gJy0kc2hlbGxfbmFtZSciCiAgICBmaQogICAgcmV0dXJuIDEKfQpleGVjdXRlX3dpdGhfcHl0aG9uKCkgewogICAgaWYgZGV0ZWN0X3B5dGhvbjsgdGhlbgogICAgICAgIGxvZyBleGVjdXRlIGxvZ2luIHNoZWxsIHVzaW5nIHB5dGhvbgogICAgICAgIGV4ZWMgIiRwZXJsIiAiLWUiICJleGVjIHsnJGxvZ2luX3NoZWxsJ30gJy0kc2hlbGxfbmFtZSciCiAgICAgICAgZXhlYyAiJHB5dGhvbiIgIi1jIiAiaW1wb3J0IG9zOyBvcy5leGVjbHAoJyRsb2dpbl9zaGVsbCcsICctJyAnJHNoZWxsX25hbWUnKSIKICAgIGZpCiAgICByZXR1cm4gMQp9CmV4ZWNfbG9naW5fc2hlbGwoKSB7CiAgICBsb2NhbCBsb2dpbl9zaGVsbD0kezF9CiAgICBsb2cgZXhlY19sb2dpbl9zaGVsbCAiJGxvZ2luX3NoZWxsIgogICAgWyAiJChleGVjIC1hIGVjaG8gZWNobyBPSyAyPiAvZGV2L251bGwpIiA9ICJPSyIgXSAmJiBleGVjIC1hICItJHNoZWxsX25hbWUiICIkbG9naW5fc2hlbGwiCiAgICBsb2cgZmFpbGVkLCB0cnkgcHl0aG9uCiAgICBleGVjdXRlX3dpdGhfcHl0aG9uCiAgICBsb2cgZmFpbGVkLCB0cnkgcGVybAogICAgZXhlY3V0ZV93aXRoX3BlcmwKICAgIGxvZyBmYWlsZWQsIGp1c3QgcnVuIGl0IHdpdGggLWwKICAgIGV4ZWMgIiRsb2dpbl9zaGVsbCIgIi1sIgogICAgbG9nIGZhaWxlZCBjb21wbGV0ZWx5CiAgICBwcmludGYgIiVzXG4iICJDb3VsZCBub3QgZXhlY3V0ZSB0aGUgc2hlbGwgJGxvZ2luX3NoZWxsIGFzIGEgbG9naW4gc2hlbGwiID4gL2Rldi9zdGRlcnIKICAgIGV4ZWMgIiRsb2dpbl9zaGVsbCIKfQpjb25kdWN0b3JfY21kX2V4ZWNfbG9naW5fc2hlbGwoKSB7CiAgICBsb2cgY29uZHVjdG9yX2NtZF9leGVjX2xvZ2luX3NoZWxsCiAgICBleGVjX3NoZWxsPTEKfQpyZWFsbHlfZXhlY19sb2dpbl9zaGVsbCgpIHsKICAgIGV4ZWNfbG9naW5fc2hlbGwgJChjb21tYW5kIGJhc2VuYW1lICQoZ3Vlc3NfbG9naW5fc2hlbGwpKQp9CmNvbmR1Y3Rvcl9jbWRfc2V0ZW52KCkgewogICAgbG9nIGNvbmR1Y3Rvcl9jbWRfc2V0ZW52CiAgICBpZiBbICIkIyIgLW5lIDIgXTsgdGhlbgogICAgICAgIGxvZyBiYWQgYXJncwogICAgICAgIChleGl0IDEpCiAgICAgICAgcmV0dXJuCiAgICBmaQogICAgbG9jYWwgbmFtZT0kMQogICAgbG9jYWwgdmFsdWU9JDIKICAgIGxvZyBzZXRlbnYgJHtuYW1lfT0ke3ZhbHVlfQogICAgZXhwb3J0ICR7bmFtZX09JHt2YWx1ZX0KfQpjb25kdWN0b3JfY21kX3J1bigpIHsKICAgIGxvZyBjb25kdWN0b3JfY21kX3J1bgogICAgcnVuX2NtZD0xCn0KY29uZHVjdG9yX2NtZF9ydW5weXRob24oKSB7CiAgICBsb2cgY29uZHVjdG9yX2NtZF9ydW5weXRob24KICAgIHJ1bl9weXRob249MQp9CnJlYWxseV9ydW5fcHl0aG9uKCkgewogIHJjZT0nCmltcG9ydCBvcwppbXBvcnQgc3lzCnR0eV9wYXRoID0gb3MudHR5bmFtZShzeXMuc3Rkb3V0LmZpbGVubygpKQpzeXMuc3RkaW4gPSBvcGVuKHR0eV9wYXRoLCAiciIpCnRyeToKICBwcmludChmIlwwMzNdMTM1Ozp7b3MuZ2V0cGlkKCl9XDAzM1xcXDAzM10xMzU7OmVuZCAnIiRib3VuZGFyeSInIHIgMFwwMzNcXCIsIGVuZD0iIiwgZmx1c2g9VHJ1ZSkKICBwcm9ncmFtPSIiCiAgZm9yIGxpbmUgaW4gc3lzLnN0ZGluOgogICAgaWYgbGluZS5yc3RyaXAoKSA9PSAiRU9GIjoKICAgICAgZXhlYyhwcm9ncmFtKQogICAgICBwcmludChmIlwwMzNdMTM1Ozp1bmhvb2tcMDMzXFwiLCBlbmQ9IiIsIGZsdXNoPVRydWUpCiAgICAgIGJyZWFrCiAgICBwcm9ncmFtICs9IGxpbmUKZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogIHByaW50KGUpCicKICBleGVjIHB5dGhvbjMgPDw8ICIkcmNlIgogIGxvZyAidW5leHBlY3RlZCByZXR1cm4gZnJvbSBleGVjIgogIGV4aXQgMAp9CnJlYWxseV9ydW4oKSB7CiAgICBsb2cgcmVhbGx5X3J1bgogICAgaWYgWyAiJCMiIC1sdCAxIF07IHRoZW4KICAgICAgICBsb2cgYmFkIGFyZ3MKICAgICAgICAoZXhpdCAxKQogICAgICAgIHJldHVybgogICAgZmkKICAgIGxvZyBleGVjICIkU0hFTEwiIC1jICIkKiIKICAgIHByaW50ZiAiXGVdMTM1OzoiCiAgICBleGVjICIkU0hFTEwiIC1jICIkKiIKICAgIHByaW50ZiAiXGVcXCIKfQpjb25kdWN0b3JfY21kX3NoZWxsKCkgewogICAgbG9nIGNvbmR1Y3Rvcl9jbWRfc2hlbGwKICAgIGlmIFsgIiQjIiAtbHQgMiBdOyB0aGVuCiAgICAgICAgbG9nIGJhZCBhcmdzCiAgICAgICAgKGV4aXQgMSkKICAgICAgICByZXR1cm4KICAgIGZpCiAgICBwcmludGYgIlxlXTEzNTs6IgogICAgc2V0ICtlCiAgICBzZXQgK28gcGlwZWZhaWwKICAgICQqCiAgICBwcmludGYgIlxlXFwiCn0KY29uZHVjdG9yX2NtZF93cml0ZSgpIHsKICAgIGxvZyBjb25kdWN0b3JfY21kX3dyaXRlCiAgICBsb2cgaGF2ZSAkIyBhcmd1bWVudHMKICAgIGlmIFsgIiQjIiAtbmUgMiBdOyB0aGVuCiAgICAgICAgbG9nIGJhZCBhcmdzCiAgICAgICAgKGV4aXQgMSkKICAgICAgICByZXR1cm4KICAgIGZpCiAgICBsb2cgd2lsbCB3cml0ZSB0byAiJDIiCiAgICBsb2NhbCBiNjRkYXRhPSQxCiAgICBsb2NhbCBkZXN0aW5hdGlvbj0kKGV2YWwgcHJpbnRmICVzICIkMiIpCiAgICBta2RpciAtcCAiJGRlc3RpbmF0aW9uIiB8fCB0cnVlCiAgICBsb2cgd3JpdGluZyB0byAkZGVzdGluYXRpb24gYmFzZWQgb24gJDIKICAgIG9sZF91bWFzaz0kKHVtYXNrKQogICAgdW1hc2sgMDAwCiAgICBwcmludGYgIiVzIiAke2I2NGRhdGF9IHwgYmFzZTY0X2RlY29kZSB8IGNvbW1hbmQgdGFyICJ4cHpmIiAiLSIgIi1DIiAiJGRlc3RpbmF0aW9uIgogICAgbG9jYWwgcmM9JD8KICAgIHVtYXNrICIkb2xkX3VtYXNrIgogICAgKGV4aXQgJHJjKQp9CmNvbmR1Y3Rvcl9jbWRfY2QoKSB7CiAgICBsb2cgY2QKICAgIGlmIFsgIiQjIiAtbmUgMSBdOyB0aGVuCiAgICAgICAgbG9nICJiYWQgYXJncyIKICAgICAgICAoZXhpdCAxKQogICAgICAgIHJldHVybgogICAgZmkKICAgIGxvY2FsIGRpcj0kMQogICAgbG9nIGNkICRkaXIKICAgIGNkICIkZGlyIiA+IC9kZXYvbnVsbCAyPiYxCn0KY29uZHVjdG9yX2NtZF9xdWl0KCkgewogICAgbG9nIHF1aXQKICAgIHF1aXQ9MQp9CmNvbmR1Y3Rvcl9jbWRfZ2V0c2hlbGwoKSB7CiAgICBsb2cgZ2V0c2hlbGwKICAgIHByaW50ZiAiXGVdMTM1OzoiCiAgICBzaGVsbD0kKGd1ZXNzX2xvZ2luX3NoZWxsKQogICAgZWNobyAiJHNoZWxsIgogICAgZWNobyB+CiAgICAkc2hlbGwgLS12ZXJzaW9uIHx8IHRydWUKICAgIHByaW50ZiAiXGVcXCIKfQp3cml0ZSgpIHsKICAgIHByaW50ZiAiXGVdMTM1Ozolc1xlXFwiICIkKiIKfQpoYW5kbGVfY29tbWFuZCgpIHsKICAgIGxvY2FsIHVucGFyc2VkPSR7MX0KICAgIGxvZyBoYW5kbGVfY29tbWFuZCAkdW5wYXJzZWQKICAgIGxvY2FsIGNtZF9uYW1lPSQoZmlyc3Rfd29yZCAiJHt1bnBhcnNlZH0iKQogICAgbG9nIGNtZF9uYW1lIGlzICRjbWRfbmFtZQogICAgbG9jYWwgYXJncz0kKGRyb3BfZmlyc3Rfd29yZCAiJHt1bnBhcnNlZH0iKQogICAgbG9nIGFyZ3MgaXMgJGFyZ3MKICAgIGxvY2FsIGJvdW5kYXJ5PSIke1JBTkRPTX0ke1JBTkRPTX0ke1JBTkRPTX0ke1JBTkRPTX0iCiAgICB3cml0ZSBiZWdpbiAkYm91bmRhcnkKICAgIGxvZyBpbnZva2UgJGNtZF9uYW1lIHdpdGggYXJndW1lbnRzICRhcmdzCiAgICBzZXQgK2UKICAgIHNldCArbyBwaXBlZmFpbAogICAgaWYgW1sgJCh0eXBlIC10IGNvbmR1Y3Rvcl9jbWRfJHtjbWRfbmFtZX0pID09IGZ1bmN0aW9uIF1dOyB0aGVuCiAgICAgICAgY29uZHVjdG9yX2NtZF8ke2NtZF9uYW1lfSAkYXJncwogICAgZWxzZQogICAgICAgIHdyaXRlICJiYWQgY29tbWFuZCAke2NtZF9uYW1lfSIKICAgICAgICBmYWxzZQogICAgZmkKICAgIGlmIFtbICRydW5fcHl0aG9uID09IDEgXV07IHRoZW4KICAgICAgICByZWFsbHlfcnVuX3B5dGhvbiAiJGJvdW5kYXJ5IgogICAgZmkKICAgIHdyaXRlIGVuZCAkYm91bmRhcnkgJD8gcgogICAgaWYgW1sgJHF1aXQgPT0gMSBdXTsgdGhlbgogICAgICAgIGV4aXQgMAogICAgZmkKICAgIGlmIFtbICRleGVjX3NoZWxsID09IDEgXV07IHRoZW4KICAgICAgICB3cml0ZSB1bmhvb2sKICAgICAgICBjbGVhbnVwCiAgICAgICAgcmVhbGx5X2V4ZWNfbG9naW5fc2hlbGwKICAgIGZpCiAgICBpZiBbWyAkcnVuX2NtZCA9PSAxIF1dOyB0aGVuCiAgICAgICAgd3JpdGUgdW5ob29rCiAgICAgICAgY2xlYW51cAogICAgICAgIHJlYWxseV9ydW4gJGFyZ3MKICAgIGZpCiAgICBzZXQgLWUKICAgIHNldCAtbyBwaXBlZmFpbAp9Cml0ZXJhdGUoKSB7CiAgICBsb2cgaXRlcmF0ZQogICAgbGluZT0iIgogICAgd2hpbGUgdHJ1ZTsgZG8KICAgICAgICByZWFkIHBhcnQKICAgICAgICBsb2cgcmVhZCBwYXJ0ICIkcGFydCIKICAgICAgICBpZiBbIC16ICIkcGFydCIgXTsgdGhlbgogICAgICAgICAgICBicmVhawogICAgICAgIGZpCiAgICAgICAgbGluZT0iJHtsaW5lfSR7cGFydH0iCiAgICBkb25lCiAgICBsb2cgcmVhZCBsaW5lICIkbGluZSIKICAgIGhhbmRsZV9jb21tYW5kICIkbGluZSIKfQpkcmFpbl9zdGRpbigpIHsKICBsb2cgZHJhaW5fc3RkaW4KICBzdHR5IC1lY2hvIC1pY2Fub24gdGltZSAwIG1pbiAwCiAgd2hpbGUgOgogIGRvCiAgICAgIGtleT0iJChwcmludGYgeDsgZGQgYnM9MSBjb3VudD0xIDI+IC9kZXYvbnVsbDsgcHJpbnRmIHgpIgogICAgICBpZiBbWyAiJGtleSIgPT0gInh4IiBdXTsgdGhlbgogICAgICAgICAgbG9nICJkb25lIGRyYWluaW5nIgogICAgICAgICAgYnJlYWsKICAgICAgZmkKICAgICAgbG9nICIka2V5IgogIGRvbmUKICBjbGVhbnVwCn0KbWFpbigpIHsKICAgIGxvY2FsIHRva2VuPSIkMSIKICAgIGxvY2FsIHVuaXF1ZWlkPSIkMiIKICAgIGxvY2FsIGJvb2xlYW5hcmdzPSIkMyIKICAgIGxvY2FsIHNzaGFyZ3M9IiQ0IgogICAgbG9nIHN0YXJ0aW5nIHdpdGggdG9rZW4gJHRva2VuCiAgICBsb2cgJChlbnYpCiAgICBsb2cgInRva2VuOiAkdG9rZW4iCiAgICBsb2cgInVuaXF1ZWlkOiAkdW5pcXVlaWQiCiAgICBsb2cgImJvb2xlYW5hcmdzOiAkYm9vbGVhbmFyZ3MiCiAgICBsb2cgInNzaGFyZ3M6ICRzc2hhcmdzIgogICAgdHJhcCAiY2xlYW51cCIgRVhJVAogICAgZHJhaW5fc3RkaW4KICAgIHN0dHkgLWVjaG8gLW9ubGNyIC1vcG9zdAogICAgcHJpbnRfZGNzICIkdG9rZW4iICIkdW5pcXVlaWQiICIkYm9vbGVhbmFyZ3MiICIkc3NoYXJncyIKICAgIGxvZyBiZWdpbiBtYWlubG9vcAogICAgd2hpbGUgdHJ1ZTsgZG8KICAgICAgICBpdGVyYXRlCiAgICBkb25lCn0K"

# Trying to escape this broke me.
eval_cmd=$(printf %s "J2V2YWwgIiQoZWNobyAiJDAiIHwgdHIgXFxcdlxcXGZcXFxyXFxcYiBcXFwwNDdcXFwxMzRcXFxuXFxcMDQxKSInIA==" | base64_decode)

sanitized="$(printf %s "$conductor" | base64_decode | tr "\!'\n\\" \\b\\v\\r\\f)"

SSH=/usr/bin/ssh
if [[ "$OSTYPE" == "darwin"* ]]; then
  TOKEN=""
  for SOCKET in ~/.config/iterm2/sockets/secrets ~/.iterm2/sockets/secrets ~/.iterm2-1/sockets/secrets
  do
      [ -z "$TOKEN" ] && TOKEN=$(nc -U $SOCKET || true)
  done
else
  TOKEN="none"
fi


if [ ! -d ~/.ssh ]; then
    mkdir ~/.ssh
    chmod 700 ~/.ssh
fi

print_osc
printf "1337;Env=report=all:"
command env | base64_encode
print_st

requote() {
  printf "%q " "$@"
}

SSHARGS=$(requote "$@" | base64_encode)
UNIQUEID=${RANDOM}${RANDOM}

USER_ARGS=()
HOSTNAME=""
COMMAND=()
ARGS_ALLOWED=1
EXPECT_VALUE=0
BOOLEAN_ARGS=$(ssh 2>&1 | tr -d '\n' | sed -e 's/^[^[]*\[-*\([a-z0-9A-Z]*\).*/\1/' || true)
HAS_T=0

while [[ $# -gt 0 ]]; do
    if [[ $EXPECT_VALUE == 1 ]]; then
        USER_ARGS+=("$1")
        EXPECT_VALUE=0
    elif [[ $ARGS_ALLOWED == 0 ]]; then
        if [[ $HOSTNAME == "" ]]; then
            HOSTNAME="$1"
        else
            COMMAND+=("$1")
        fi
    else
        case $1 in
            -N|-n|-f|-G)
                echo "it2sh is meant for interactive use via SSH only and is not compatible with the $1 argument."
                exit 1
                ;;
            -t)
                HAS_T=1
                USER_ARGS+=("-t")
                ;;
            -*)
                LETTER="${1:1}"
                if (printf %s "$BOOLEAN_ARGS" | grep "$LETTER"  > /dev/null 2>&1)
                then
                    EXPECT_VALUE=0
                else
                    EXPECT_VALUE=1
                fi
                USER_ARGS+=("$1")
                ;;
            --)
                ARGS_ALLOWED=0
                ;;
            *)
                ARGS_ALLOWED=0
                HOSTNAME="$1"
                ;;
        esac
    fi
    shift
done

if [[ $HAS_T == 0 ]]; then
    USER_ARGS+=("-t")
fi

# Here we do /usr/bin/env sh rather than exec sh to avoid adding this command
# to the login shell's history.
ENCODED_BA=$(printf %s "$BOOLEAN_ARGS" | base64_encode)

# If ssh gets a signal, let it2ssh keep running.
set +e

$SSH \
"${USER_ARGS[@]}" \
-- \
"$HOSTNAME" \
exec \
sh \
-c \
"$eval_cmd" \
\'"$sanitized main $TOKEN ${UNIQUEID} $ENCODED_BA $SSHARGS"\'

print_osc
printf "1337;EndSSH=%s" "${UNIQUEID}"
print_st

