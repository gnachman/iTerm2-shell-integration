#!/usr/bin/env bash

set -euo pipefail

if [ "$#" -eq 0 ]; then
    ssh 2>&1 | sed -e 's/usage: ssh/usage: it2ssh/' >&2
    exit 1
fi

function print_osc() {
    if [[ $TERM == screen* ]]; then
        printf "\033Ptmux;\033\033]"
    else
        printf "\033]"
    fi
}

# More of the tmux workaround described above.
function print_st() {
    if [[ $TERM == screen* ]]; then
        printf "\a\033\\"
    else
        printf "\a"
    fi
}

mkdir -p ~/.ssh/controlmasters
CONTROL_PATH="$HOME/.ssh/controlmasters/%r@%h:%p"

if command -v base64 > /dev/null 2> /dev/null; then
    base64_encode() { command base64 | command tr -d \\n\\r; }
    base64_decode() { command base64 -d; }
elif command -v b64encode > /dev/null 2> /dev/null; then
    base64_encode() { command b64encode - | command sed '1d;$d' | command tr -d \\n\\r; }
    base64_decode() { command fold -w 76 | command b64decode -r; }
elif detect_python; then
    pybase64() { command "$python" -c "import sys, base64; getattr(sys.stdout, 'buffer', sys.stdout).write(base64.standard_b64$1(getattr(sys.stdin, 'buffer', sys.stdin).read()))"; }
    base64_encode() { pybase64 "encode"; }
    base64_decode() { pybase64 "decode"; }
elif detect_perl; then
    base64_encode() { command "$perl" -MMIME::Base64 -0777 -ne 'print encode_base64($_)'; }
    base64_decode() { command "$perl" -MMIME::Base64 -ne 'print decode_base64($_)'; }
else
    die "base64 executable not present on local host"
fi

conductor="IyEvdXNyL2Jpbi9lbnYgYmFzaAojIFVzYWdlOgojIGNvbmR1Y3Rvci5zaCB0b2tlbgoKc2V0IC1ldW8gcGlwZWZhaWwKCiMgR2xvYmFsIHZhcmlhYmxlcwpsb2dpbl9zaGVsbD0iIgpzaGVsbF9uYW1lPSIiCnF1aXQ9MApweXRob25fZGV0ZWN0ZWQ9IjAiCnBlcmxfZGV0ZWN0ZWQ9IjAiCmV4ZWNfc2hlbGw9MApydW5fY21kPTAKc3R0eV9zZXR0aW5ncz0kKGNvbW1hbmQgc3R0eSAtZykKCiMgVXRpbGl0aWVzCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpjbGVhbnVwKCkgewogIGNvbW1hbmQgc3R0eSAiJHN0dHlfc2V0dGluZ3MiCn0KCmRpZSgpIHsKICAgIGxvZyBkaWUgIiQqIgogICAgcHJpbnRmICJcMDMzWzMxbSVzXDAzM1ttXG5cciIgIiQqIiA+IC9kZXYvc3RkZXJyCiAgICBjbGVhbnVwCiAgICBleGl0IDEKfQoKaXQyc3NoX3ZlcmJvc2U9MAoKbG9nKCkgewogICAgaWYgW1sgJGl0MnNzaF92ZXJib3NlID09IDAgXV07IHRoZW4KICAgICAgICByZXR1cm4KICAgIGZpCiAgICBwcmludGYgIlskJF0gJXM6ICVzXG4iICQoZGF0ZSArJUg6JU06JVMpICIkKiIgPj4gL3RtcC9pdDJzc2gubG9nCn0KCiMgUHJpbnRpbmcgY29udHJvbCBzZXF1ZW5jZXMKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCnByaW50X2RjcygpIHsKICAgIGxvY2FsIHRva2VuPSQxCiAgICBsb2NhbCB1bmlxdWVpZD0kMgogICAgbG9jYWwgYm9vbGFyZ3M9JDMKICAgIGxvY2FsIHNzaGFyZ3M9JDQKICAgIGxvZyBvc2MgcHJpbnRfZGNzICQxICQyICQzICQ0CgogICAgcHJpbnRmICJcMDMzUDIwMDBwIgogICAgcHJpbnRmICIlcyAlcyAlcyAtICVzXG4iICIke3Rva2VufSIgIiR7dW5pcXVlaWR9IiAiJHtib29sYXJnc30iICIke3NzaGFyZ3N9Igp9CgojIFN0cmluZyBwYXJzaW5nCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpmaXJzdF93b3JkKCkgewogICAgbG9jYWwgaW5wdXQ9IiQxIgogICAgcHJpbnRmICIlcyIgJHtpbnB1dCUlICp9Cn0KCmRyb3BfZmlyc3Rfd29yZCgpIHsKICAgIGxvY2FsIGlucHV0PSIkMSIKICAgIGxvZyBkcm9wIGZpcnN0IHdvcmQgZnJvbTogIiRpbnB1dCIKICAgIHByaW50ZiAiJXMiICIke2lucHV0IyogfSIKfQoKaWYgY29tbWFuZCAtdiBiYXNlNjQgPiAvZGV2L251bGwgMj4gL2Rldi9udWxsOyB0aGVuCiAgICBsb2cgImZvdW5kIGJhc2U2NCBjb21tYW5kIgogICAgYmFzZTY0X2VuY29kZSgpIHsgY29tbWFuZCBiYXNlNjQgfCBjb21tYW5kIHRyIC1kIFxcblxccjsgfQogICAgYmFzZTY0X2RlY29kZSgpIHsgY29tbWFuZCBiYXNlNjQgLWQ7IH0KZWxpZiBjb21tYW5kIC12IGI2NGVuY29kZSA+IC9kZXYvbnVsbCAyPiAvZGV2L251bGw7IHRoZW4KICAgIGxvZyAiZm91bmQgYjY0ZW5jb2RlLCBiNjRkZWNvZGUgY29tbWFuZHMiCiAgICBiYXNlNjRfZW5jb2RlKCkgeyBjb21tYW5kIGI2NGVuY29kZSAtIHwgY29tbWFuZCBzZWQgJzFkOyRkJyB8IGNvbW1hbmQgdHIgLWQgXFxuXFxyOyB9CiAgICBiYXNlNjRfZGVjb2RlKCkgeyBjb21tYW5kIGZvbGQgLXcgNzYgfCBjb21tYW5kIGI2NGRlY29kZSAtcjsgfQplbGlmIGRldGVjdF9weXRob247IHRoZW4KICAgIGxvZyAidXNpbmcgcHl0aG9uIGZvciBiYXNlNjQiCiAgICBweWJhc2U2NCgpIHsgY29tbWFuZCAiJHB5dGhvbiIgLWMgImltcG9ydCBzeXMsIGJhc2U2NDsgZ2V0YXR0cihzeXMuc3Rkb3V0LCAnYnVmZmVyJywgc3lzLnN0ZG91dCkud3JpdGUoYmFzZTY0LnN0YW5kYXJkX2I2NCQxKGdldGF0dHIoc3lzLnN0ZGluLCAnYnVmZmVyJywgc3lzLnN0ZGluKS5yZWFkKCkpKSI7IH0KICAgIGJhc2U2NF9lbmNvZGUoKSB7IHB5YmFzZTY0ICJlbmNvZGUiOyB9CiAgICBiYXNlNjRfZGVjb2RlKCkgeyBweWJhc2U2NCAiZGVjb2RlIjsgfQplbGlmIGRldGVjdF9wZXJsOyB0aGVuCiAgICBsb2cgInVzaW5nIHBlcmwgZm9yIGJhc2U2NCIKICAgIGJhc2U2NF9lbmNvZGUoKSB7IGNvbW1hbmQgIiRwZXJsIiAtTU1JTUU6OkJhc2U2NCAtMDc3NyAtbmUgJ3ByaW50IGVuY29kZV9iYXNlNjQoJF8pJzsgfQogICAgYmFzZTY0X2RlY29kZSgpIHsgY29tbWFuZCAiJHBlcmwiIC1NTUlNRTo6QmFzZTY0IC1uZSAncHJpbnQgZGVjb2RlX2Jhc2U2NCgkXyknOyB9CmVsc2UKICAgIGRpZSAiYmFzZTY0IGV4ZWN1dGFibGUgbm90IHByZXNlbnQgb24gcmVtb3RlIGhvc3QiCmZpCgojIEdldCB1c2VyJ3MgbG9naW4gc2hlbGwKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCnBhcnNlX3Bhc3N3ZF9yZWNvcmQoKSB7CiAgICBwcmludGYgIiVzIiAiJChjb21tYW5kIGdyZXAgLW8gJ1teOl0qJCcpIgp9CgojIHNldHMgJGxvZ2luX3NoZWxsIGFzIGEgc2lkZSBlZmZlY3QuCiMgcmV0dXJucyBpZiBpdCBsb29rcyBleGVjdXRhYmxlLgpsb2dpbl9zaGVsbF9pc19vaygpIHsKICAgIGxvZyBsb2dpbl9zaGVsbF9pc19vawogICAgWyAtbiAiJDEiIF0gJiYgbG9naW5fc2hlbGw9JChlY2hvICQxIHwgcGFyc2VfcGFzc3dkX3JlY29yZCkKICAgIFsgLW4gIiRsb2dpbl9zaGVsbCIgLWEgLXggIiRsb2dpbl9zaGVsbCIgXSAmJiByZXR1cm4gMAogICAgbG9nICJsb2dpbiBzaGVsbCBvZiAkbG9naW5fc2hlbGwgaXMgb2siCiAgICByZXR1cm4gMQp9Cgp1c2luZ19nZXRlbnQoKSB7CiAgICBjbWQ9JChjb21tYW5kIC12IGdldGVudCkgJiYgWyAtbiAiJGNtZCIgXSAmJiBvdXRwdXQ9JChjb21tYW5kICIkY21kIiBwYXNzd2QgIiRVU0VSIiAyPi9kZXYvbnVsbCkgXAogICAgJiYgbG9naW5fc2hlbGxfaXNfb2sgIiRvdXRwdXQiCn0KCnVzaW5nX2lkKCkgewogICAgY21kPSQoY29tbWFuZCAtdiBpZCkgJiYgWyAtbiAiJGNtZCIgXSAmJiBvdXRwdXQ9JChjb21tYW5kICIkY21kIiAtUCAiJFVTRVIiIDI+L2Rldi9udWxsKSBcCiAgICAmJiBsb2dpbl9zaGVsbF9pc19vayAiJG91dHB1dCIKfQoKZGV0ZWN0X3B5dGhvbigpIHsKICAgIGlmIFsgcHl0aG9uX2RldGVjdGVkID0gIjEiIF07IHRoZW4KICAgICAgICBbIC1uICIkcHl0aG9uIiBdICYmIHJldHVybiAwCiAgICAgICAgcmV0dXJuIDEKICAgIGZpCiAgICBweXRob25fZGV0ZWN0ZWQ9IjEiCiAgICBweXRob249JChjb21tYW5kIC12IHB5dGhvbjMpCiAgICBbIC16ICIkcHl0aG9uIiBdICYmIHB5dGhvbj0kKGNvbW1hbmQgLXYgcHl0aG9uMikKICAgIFsgLXogIiRweXRob24iIF0gJiYgcHl0aG9uPSQoY29tbWFuZCAtdiBweXRob24pCiAgICBpZiBbIC16ICIkcHl0aG9uIiAtbyAhIC14ICIkcHl0aG9uIiBdOyB0aGVuIHB5dGhvbj0iIjsgcmV0dXJuIDE7IGZpCiAgICBsb2cgbm8gcHl0aG9uCiAgICByZXR1cm4gMAp9Cgp1c2luZ19weXRob24oKSB7CiAgICBkZXRlY3RfcHl0aG9uICYmIG91dHB1dD0kKGNvbW1hbmQgIiRweXRob24iIC1jICJpbXBvcnQgcHdkLCBvczsgcHJpbnQocHdkLmdldHB3dWlkKG9zLmdldGV1aWQoKSkucHdfc2hlbGwpIikgXAogICAgJiYgbG9naW5fc2hlbGw9IiRvdXRwdXQiICYmIGxvZ2luX3NoZWxsX2lzX29rCn0KCmRldGVjdF9wZXJsKCkgewogICAgaWYgWyBwZXJsX2RldGVjdGVkID0gIjEiIF07IHRoZW4KICAgICAgICBbIC1uICIkcGVybCIgXSAmJiByZXR1cm4gMAogICAgICAgIHJldHVybiAxCiAgICBmaQogICAgcGVybF9kZXRlY3RlZD0iMSIKICAgIHBlcmw9JChjb21tYW5kIC12IHBlcmwpCiAgICBpZiBbIC16ICIkcGVybCIgLW8gISAteCAiJHBlcmwiIF07IHRoZW4gcGVybD0iIjsgcmV0dXJuIDE7IGZpCiAgICBsb2cgbm8gcGVybAogICAgcmV0dXJuIDAKfQoKdXNpbmdfcGVybCgpIHsKICAgIGRldGVjdF9wZXJsICYmIG91dHB1dD0kKGNvbW1hbmQgIiRwZXJsIiAtZSAnbXkgJHNoZWxsID0gKGdldHB3dWlkKCQ8KSlbOF07IHByaW50ICRzaGVsbCcpIFwKICAgICYmIGxvZ2luX3NoZWxsPSIkb3V0cHV0IiAmJiBsb2dpbl9zaGVsbF9pc19vawp9Cgp1c2luZ19zaGVsbF9lbnYoKSB7CiAgICBbIC1uICIkU0hFTEwiIF0gJiYgbG9naW5fc2hlbGw9IiRTSEVMTCIgJiYgbG9naW5fc2hlbGxfaXNfb2sKfQoKZ3Vlc3NfbG9naW5fc2hlbGwoKSB7CiAgICBbIC1uICIkbG9naW5fc2hlbGwiIF0gfHwgdXNpbmdfZ2V0ZW50IHx8IHVzaW5nX2lkIHx8IHVzaW5nX3B5dGhvbiB8fCB1c2luZ19wZXJsIHx8IHVzaW5nX3Bhc3N3ZCB8fCB1c2luZ19zaGVsbF9lbnYgfHwgbG9naW5fc2hlbGw9InNoIgogICAgc2hlbGxfbmFtZT0kKGNvbW1hbmQgYmFzZW5hbWUgJGxvZ2luX3NoZWxsKQogICAgbG9nIGxvZ2luIHNoZWxsIGlzICR7c2hlbGxfbmFtZX0KICAgIHByaW50ZiAiJXMiICR7c2hlbGxfbmFtZX0KfQoKIyBFeGVjdXRlIGxvZ2luIHNoZWxsCiMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCgpleGVjdXRlX3dpdGhfcGVybCgpIHsKICAgIGlmIGRldGVjdF9wZXJsOyB0aGVuCiAgICAgICAgbG9nIGV4ZWN1dGUgbG9naW4gc2hlbGwgdXNpbmcgcGVybAogICAgICAgIGV4ZWMgIiRwZXJsIiAiLWUiICJleGVjIHsnJGxvZ2luX3NoZWxsJ30gJy0kc2hlbGxfbmFtZSciCiAgICBmaQogICAgcmV0dXJuIDEKfQoKZXhlY3V0ZV93aXRoX3B5dGhvbigpIHsKICAgIGlmIGRldGVjdF9weXRob247IHRoZW4KICAgICAgICBsb2cgZXhlY3V0ZSBsb2dpbiBzaGVsbCB1c2luZyBweXRob24KICAgICAgICBleGVjICIkcGVybCIgIi1lIiAiZXhlYyB7JyRsb2dpbl9zaGVsbCd9ICctJHNoZWxsX25hbWUnIgogICAgICAgIGV4ZWMgIiRweXRob24iICItYyIgImltcG9ydCBvczsgb3MuZXhlY2xwKCckbG9naW5fc2hlbGwnLCAnLScgJyRzaGVsbF9uYW1lJykiCiAgICBmaQogICAgcmV0dXJuIDEKfQoKZXhlY19sb2dpbl9zaGVsbCgpIHsKICAgIGxvY2FsIGxvZ2luX3NoZWxsPSR7MX0KCiAgICBsb2cgZXhlY19sb2dpbl9zaGVsbCAiJGxvZ2luX3NoZWxsIgoKICAgICMgV2UgbmVlZCB0byBwYXNzIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aGUgZXhlY3V0ZWQgcHJvZ3JhbSB3aXRoIGEgbGVhZGluZyAtCiAgICAjIHRvIG1ha2Ugc3VyZSB0aGUgc2hlbGwgZXhlY3V0ZXMgYXMgYSBsb2dpbiBzaGVsbC4gTm90ZSB0aGF0IG5vdCBhbGwgc2hlbGxzCiAgICAjIHN1cHBvcnQgZXhlYyAtYSBzbyB3ZSB1c2UgdGhlIGJlbG93IHRvIHRyeSB0byBkZXRlY3Qgc3VjaCBzaGVsbHMKICAgIFsgIiQoZXhlYyAtYSBlY2hvIGVjaG8gT0sgMj4gL2Rldi9udWxsKSIgPSAiT0siIF0gJiYgZXhlYyAtYSAiLSRzaGVsbF9uYW1lIiAiJGxvZ2luX3NoZWxsIgogICAgbG9nIGZhaWxlZCwgdHJ5IHB5dGhvbgogICAgZXhlY3V0ZV93aXRoX3B5dGhvbgogICAgbG9nIGZhaWxlZCwgdHJ5IHBlcmwKICAgIGV4ZWN1dGVfd2l0aF9wZXJsCiAgICBsb2cgZmFpbGVkLCBqdXN0IHJ1biBpdCB3aXRoIC1sCiAgICAjIFRPRE8gLSB0aGlzIGlzIGNvbXBsaWNhdGVkLCBjb21lIGJhY2sgYW5kIGRvIGl0IGxhdGVyLgogICAgI2V4ZWN1dGVfc2hfd2l0aF9wb3NpeF9lbnYKICAgIGV4ZWMgIiRsb2dpbl9zaGVsbCIgIi1sIgogICAgbG9nIGZhaWxlZCBjb21wbGV0ZWx5CiAgICBwcmludGYgIiVzXG4iICJDb3VsZCBub3QgZXhlY3V0ZSB0aGUgc2hlbGwgJGxvZ2luX3NoZWxsIGFzIGEgbG9naW4gc2hlbGwiID4gL2Rldi9zdGRlcnIKICAgIGV4ZWMgIiRsb2dpbl9zaGVsbCIKfQoKIyBDb21tYW5kcwojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwoKIyBGaWd1cmUgb3V0IHRoZSB1c2VyJ3MgbG9naW4gc2hlbGwgYW5kIHJ1biBpdC4KY29uZHVjdG9yX2NtZF9leGVjX2xvZ2luX3NoZWxsKCkgewogICAgbG9nIGNvbmR1Y3Rvcl9jbWRfZXhlY19sb2dpbl9zaGVsbAogICAgZXhlY19zaGVsbD0xCn0KCnJlYWxseV9leGVjX2xvZ2luX3NoZWxsKCkgewogICAgZXhlY19sb2dpbl9zaGVsbCAkKGd1ZXNzX2xvZ2luX3NoZWxsKQp9Cgpjb25kdWN0b3JfY21kX2dldF9zaGVsbCgpIHsKICAgIGxvZyBjb25kdWN0b3JfY21kX2dldF9zaGVsbAogICAgZWNobyAkKGd1ZXNzX2xvZ2luX3NoZWxsKQp9CgojIFNldCBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZS4KY29uZHVjdG9yX2NtZF9zZXRlbnYoKSB7CiAgICBsb2cgY29uZHVjdG9yX2NtZF9zZXRlbnYKICAgIGxvY2FsIG5hbWU9JDEKICAgIGxvY2FsIHZhbHVlPSQyCgogICAgbG9nIHNldGVudiAke25hbWV9PSR7dmFsdWV9CiAgICBleHBvcnQgJHtuYW1lfT0ke3ZhbHVlfQp9Cgpjb25kdWN0b3JfY21kX3J1bigpIHsKICAgIGxvZyBjb25kdWN0b3JfY21kX3J1bgogICAgcnVuX2NtZD0xCn0KCnJlYWxseV9ydW4oKSB7CiAgICBsb2cgZXhlYyAiJFNIRUxMIiAtYyAiJCoiCiAgICBleGVjICIkU0hFTEwiIC1jICIkKiIKfQoKIyBVbnRhciBhIGJhc2U2NC1lbmNvZGVkIGZpbGUgYXQgYSBzcGVjaWZpZWQgbG9jYXRpb24uCmNvbmR1Y3Rvcl9jbWRfd3JpdGUoKSB7CiAgICBsb2cgY29uZHVjdG9yX2NtZF93cml0ZQogICAgbG9nIGhhdmUgJCMgYXJndW1lbnRzCiAgICBsb2cgd2lsbCB3cml0ZSB0byAiJDIiCgogICAgbG9jYWwgYjY0ZGF0YT0kMQogICAgIyBVc2UgZXZhbCB0byBleHBhbmQgJEhPTUUKICAgIGxvY2FsIGRlc3RpbmF0aW9uPSQoZXZhbCBwcmludGYgJXMgIiQyIikKCiAgICBsb2cgd3JpdGluZyB0byAkZGVzdGluYXRpb24gYmFzZWQgb24gJDIKCiAgICAjIGV4dHJhY3QgdGhlIHRhciBmaWxlIGF0b21pY2FsbHksIGluIHRoZSBzZW5zZSB0aGF0IGFueSBmaWxlIGZyb20gdGhlCiAgICAjIHRhcmZpbGUgaXMgb25seSBwdXQgaW50byBwbGFjZSBhZnRlciBpdCBoYXMgYmVlbiBmdWxseSB3cml0dGVuIHRvIGRpc2sKICAgICMgc3VwcHJlc3MgU1RERVJSIGZvciB0YXIgYXMgdGFyIHByaW50cyB2YXJpb3VzIHdhcm5pbmdzIGlmIGZvciBpbnN0YW5jZSwgdGltZXN0YW1wcyBhcmUgaW4gdGhlIGZ1dHVyZQogICAgb2xkX3VtYXNrPSQodW1hc2spCiAgICB1bWFzayAwMDAKICAgIHByaW50ZiAiJXMiICR7YjY0ZGF0YX0gfCBiYXNlNjRfZGVjb2RlIHwgY29tbWFuZCB0YXIgInhwemYiICItIiAiLUMiICIkZGVzdGluYXRpb24iCiAgICBsb2NhbCByYz0kPwogICAgdW1hc2sgIiRvbGRfdW1hc2siCiAgICAoZXhpdCAkcmMpCn0KCmNvbmR1Y3Rvcl9jbWRfY2QoKSB7CiAgICBsb2NhbCBkaXI9JDEKCiAgICBsb2cgY2QgJGRpcgogICAgY2QgIiRkaXIiID4gL2Rldi9udWxsIDI+JjEKfQoKY29uZHVjdG9yX2NtZF9xdWl0KCkgewogICAgbG9nIHF1aXQKICAgIHF1aXQ9MQp9Cgpjb25kdWN0b3JfY21kX3BzKCkgewogICAgY29tbWFuZCBwcyAtZW8gcGlkLHBwaWQsY29tbWFuZCB8IGNhdAp9Cgpjb25kdWN0b3JfY21kX2dldHBpZCgpIHsKICAgIGVjaG8gJCQKfQoKIyBNYWluIExvb3AKIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKCmhhbmRsZV9jb21tYW5kKCkgewogICAgbG9jYWwgdW5wYXJzZWQ9JHsxfQoKICAgIGxvZyBoYW5kbGVfY29tbWFuZCAkdW5wYXJzZWQKCiAgICBsb2NhbCBjbWRfbmFtZT0kKGZpcnN0X3dvcmQgIiR7dW5wYXJzZWR9IikKICAgIGxvZyBjbWRfbmFtZSBpcyAkY21kX25hbWUKICAgIGxvY2FsIGFyZ3M9JChkcm9wX2ZpcnN0X3dvcmQgIiR7dW5wYXJzZWR9IikKICAgIGxvZyBhcmdzIGlzICRhcmdzCgogICAgbG9jYWwgYm91bmRhcnk9IiR7UkFORE9NfSR7UkFORE9NfSR7UkFORE9NfSR7UkFORE9NfSIKICAgIGVjaG8gYmVnaW4gJGJvdW5kYXJ5CiAgICBsb2cgaW52b2tlICRjbWRfbmFtZSB3aXRoIGFyZ3VtZW50cyAkYXJncwogICAgc2V0ICtlCiAgICBzZXQgK28gcGlwZWZhaWwKICAgIGlmIFtbICQodHlwZSAtdCBjb25kdWN0b3JfY21kXyR7Y21kX25hbWV9KSA9PSBmdW5jdGlvbiBdXTsgdGhlbgogICAgICAgIGNvbmR1Y3Rvcl9jbWRfJHtjbWRfbmFtZX0gJGFyZ3MKICAgIGVsc2UKICAgICAgICBlY2hvICJiYWQgY29tbWFuZCAke2NtZF9uYW1lfSIKICAgICAgICBmYWxzZQogICAgZmkKICAgIGVjaG8gZW5kICRib3VuZGFyeSAkPwogICAgaWYgW1sgJHF1aXQgPT0gMSBdXTsgdGhlbgogICAgICAgIGV4aXQgMAogICAgZmkKICAgIGlmIFtbICRleGVjX3NoZWxsID09IDEgXV07IHRoZW4KICAgICAgICBlY2hvIHVuaG9vawogICAgICAgIGNsZWFudXAKICAgICAgICByZWFsbHlfZXhlY19sb2dpbl9zaGVsbAogICAgZmkKICAgIGlmIFtbICRydW5fY21kID09IDEgXV07IHRoZW4KICAgICAgICBlY2hvIHVuaG9vawogICAgICAgIGNsZWFudXAKICAgICAgICByZWFsbHlfcnVuICRhcmdzCiAgICBmaQogICAgc2V0IC1lCiAgICBzZXQgLW8gcGlwZWZhaWwKfQoKaXRlcmF0ZSgpIHsKICAgIGxvZyBpdGVyYXRlCgogICAgbGluZT0iIgogICAgd2hpbGUgdHJ1ZTsgZG8KICAgICAgICByZWFkIHBhcnQKICAgICAgICBsb2cgcmVhZCBwYXJ0ICIkcGFydCIKICAgICAgICBpZiBbIC16ICIkcGFydCIgXTsgdGhlbgogICAgICAgICAgICBicmVhawogICAgICAgIGZpCiAgICAgICAgbGluZT0iJHtsaW5lfSR7cGFydH0iCiAgICBkb25lCgogICAgbG9nIHJlYWQgbGluZSAiJGxpbmUiCiAgICBoYW5kbGVfY29tbWFuZCAiJGxpbmUiCn0KCmRyYWluX3N0ZGluKCkgewogIGxvZyBkcmFpbl9zdGRpbgogIHN0dHkgLWVjaG8gLWljYW5vbiB0aW1lIDAgbWluIDAKICB3aGlsZSA6CiAgZG8KICAgICAga2V5PSIkKHByaW50ZiB4OyBkZCBicz0xIGNvdW50PTEgMj4gL2Rldi9udWxsOyBwcmludGYgeCkiCiAgICAgIGlmIFtbICIka2V5IiA9PSAieHgiIF1dOyB0aGVuCiAgICAgICAgICBsb2cgImRvbmUgZHJhaW5pbmciCiAgICAgICAgICBicmVhawogICAgICBmaQogICAgICBsb2cgIiRrZXkiCiAgZG9uZQogIGNsZWFudXAKfQoKbWFpbigpIHsKICAgIGxvY2FsIHRva2VuPSIkMSIKICAgIGxvY2FsIHVuaXF1ZWlkPSIkMiIKICAgIGxvY2FsIGJvb2xlYW5hcmdzPSIkMyIKICAgIGxvY2FsIHNzaGFyZ3M9IiQ0IgoKICAgIGxvZyBzdGFydGluZyB3aXRoIHRva2VuICR0b2tlbgogICAgbG9nICQoZW52KQoKICAgIHRyYXAgImNsZWFudXAiIEVYSVQKICAgIGRyYWluX3N0ZGluCiAgICBwcmludF9kY3MgIiR0b2tlbiIgIiR1bmlxdWVpZCIgIiRib29sZWFuYXJncyIgIiRzc2hhcmdzIgogICAgY29tbWFuZCBzdHR5ICItZWNobyIgPCAvZGV2L3R0eQoKICAgIGxvZyBiZWdpbiBtYWlubG9vcAoKICAgIHdoaWxlIHRydWU7IGRvCiAgICAgICAgaXRlcmF0ZQogICAgZG9uZQp9Cgo="

# Trying to escape this broke me.
eval_cmd=$(printf %s "J2V2YWwgIiQoZWNobyAiJDAiIHwgdHIgXFxcdlxcXGZcXFxyXFxcYiBcXFwwNDdcXFwxMzRcXFxuXFxcMDQxKSInIA==" | base64_decode)

sanitized="$(printf %s "$conductor" | base64_decode | tr "\!'\n\\" \\b\\v\\r\\f)"

SSH=/usr/bin/ssh
TOKEN="${ITERM_SESSION_ID#*:}"

if [ ! -d ~/.ssh ]; then
    mkdir ~/.ssh
    chmod 700 ~/.ssh
fi

print_osc
printf "1337;Env=report=all:"
command env | base64_encode
print_st

SSHARGS=$(printf %s "$*" | base64_encode)
UNIQUEID=${RANDOM}${RANDOM}

USER_ARGS=()
HOSTNAME=""
COMMAND=()
ARGS_ALLOWED=1
EXPECT_VALUE=0
BOOLEAN_ARGS=$(ssh 2>&1 | tr -d '\n' | sed -e 's/^[^[]*\[-*\([a-z0-9A-Z]*\).*/\1/' || true)
HAS_T=0

while [[ $# -gt 0 ]]; do
    if [[ $EXPECT_VALUE == 1 ]]; then
        USER_ARGS+=("$1")
        EXPECT_VALUE=0
    elif [[ $ARGS_ALLOWED == 0 ]]; then
        if [[ $HOSTNAME == "" ]]; then
            HOSTNAME="$1"
        else
            COMMAND+=("$1")
        fi
    else
        case $1 in
            -N|-n|-f|-G)
                echo "it2sh is meant for interactive use via SSH only and is not compatible with the $1 argument."
                exit 1
                ;;
            -t)
                HAS_T=1
                USER_ARGS+=("-t")
                ;;
            -*)
                LETTER="${1:1}"
                if (printf %s "$BOOLEAN_ARGS" | grep "$LETTER"  > /dev/null 2>&1)
                then
                    EXPECT_VALUE=0
                else
                    EXPECT_VALUE=1
                fi
                USER_ARGS+=("$1")
                ;;
            --)
                ARGS_ALLOWED=0
                ;;
            *)
                ARGS_ALLOWED=0
                HOSTNAME="$1"
                ;;
        esac
    fi
    shift
done

if [[ $HAS_T == 0 ]]; then
    USER_ARGS+=("-t")
fi

# Here we do /usr/bin/env sh rather than exec sh to avoid adding this command
# to the login shell's history.
ENCODED_BA=$(printf %s "$BOOLEAN_ARGS" | base64_encode)

# If ssh gets a signal, let it2ssh keep running.
set +e

$SSH \
"${USER_ARGS[@]}" \
-- \
"$HOSTNAME" \
/usr/bin/env \
sh \
-c \
"$eval_cmd" \
\'"$sanitized main $TOKEN ${UNIQUEID} $ENCODED_BA $SSHARGS"\'

print_osc
printf "1337;EndSSH=%s" "${UNIQUEID}"
print_st

