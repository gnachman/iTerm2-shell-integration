#!/usr/bin/env bash

set -euo pipefail
unset OS_ACTIVITY_DT_MODE

if [ "$#" -eq 0 ]; then
    ssh 2>&1 | sed -e 's/usage: ssh/usage: it2ssh/' >&2
    exit 1
fi

function print_osc() {
    if [[ $TERM == screen* ]]; then
        printf "\033Ptmux;\033\033]"
    else
        printf "\033]"
    fi
}

# More of the tmux workaround described above.
function print_st() {
    if [[ $TERM == screen* ]]; then
        printf "\a\033\\"
    else
        printf "\a"
    fi
}

mkdir -p ~/.ssh/controlmasters
CONTROL_PATH="$HOME/.ssh/controlmasters/%r@%h:%p"

if command -v base64 > /dev/null 2> /dev/null; then
    base64_encode() { command base64 | command tr -d \\n\\r; }
    base64_decode() { command base64 -d; }
elif command -v b64encode > /dev/null 2> /dev/null; then
    base64_encode() { command b64encode - | command sed '1d;$d' | command tr -d \\n\\r; }
    base64_decode() { command fold -w 76 | command b64decode -r; }
elif detect_python; then
    pybase64() { command "$python" -c "import sys, base64; getattr(sys.stdout, 'buffer', sys.stdout).write(base64.standard_b64$1(getattr(sys.stdin, 'buffer', sys.stdin).read()))"; }
    base64_encode() { pybase64 "encode"; }
    base64_decode() { pybase64 "decode"; }
elif detect_perl; then
    base64_encode() { command "$perl" -MMIME::Base64 -0777 -ne 'print encode_base64($_)'; }
    base64_decode() { command "$perl" -MMIME::Base64 -ne 'print decode_base64($_)'; }
else
    die "base64 executable not present on local host"
fi

conductor=""

# Trying to escape this broke me.
eval_cmd=$(printf %s "J2V2YWwgIiQoZWNobyAiJDAiIHwgdHIgXFxcdlxcXGZcXFxyXFxcYiBcXFwwNDdcXFwxMzRcXFxuXFxcMDQxKSInIA==" | base64_decode)

sanitized="$(printf %s "$conductor" | base64_decode | tr "\!'\n\\" \\b\\v\\r\\f)"

SSH=/usr/bin/ssh
if [[ "$OSTYPE" == "darwin"* ]]; then
  TOKEN=""
  for SOCKET in ~/.config/iterm2/sockets/secrets ~/.iterm2/sockets/secrets ~/.iterm2-1/sockets/secrets
  do
      [ -z "$TOKEN" ] && TOKEN=$(nc -U $SOCKET || true)
  done
else
  TOKEN="none"
fi


if [ ! -d ~/.ssh ]; then
    mkdir ~/.ssh
    chmod 700 ~/.ssh
fi

print_osc
printf "1337;Env=report=all:"
command env | base64_encode
print_st

requote() {
  printf "%q " "$@"
}

SSHARGS=$(requote "$@" | base64_encode)
UNIQUEID=${RANDOM}${RANDOM}

USER_ARGS=()
HOSTNAME=""
COMMAND=()
ARGS_ALLOWED=1
EXPECT_VALUE=0
BOOLEAN_ARGS=$(ssh 2>&1 | tr -d '\n' | sed -e 's/^[^[]*\[-*\([a-z0-9A-Z]*\).*/\1/' || true)
HAS_T=0

while [[ $# -gt 0 ]]; do
    if [[ $EXPECT_VALUE == 1 ]]; then
        USER_ARGS+=("$1")
        EXPECT_VALUE=0
    elif [[ $ARGS_ALLOWED == 0 ]]; then
        if [[ $HOSTNAME == "" ]]; then
            HOSTNAME="$1"
        else
            COMMAND+=("$1")
        fi
    else
        case $1 in
            -N|-n|-f|-G)
                echo "it2sh is meant for interactive use via SSH only and is not compatible with the $1 argument."
                exit 1
                ;;
            -t)
                HAS_T=1
                USER_ARGS+=("-t")
                ;;
            -*)
                LETTER="${1:1}"
                if (printf %s "$BOOLEAN_ARGS" | grep "$LETTER"  > /dev/null 2>&1)
                then
                    EXPECT_VALUE=0
                else
                    EXPECT_VALUE=1
                fi
                USER_ARGS+=("$1")
                ;;
            --)
                ARGS_ALLOWED=0
                ;;
            *)
                ARGS_ALLOWED=0
                HOSTNAME="$1"
                ;;
        esac
    fi
    shift
done

if [[ $HAS_T == 0 ]]; then
    USER_ARGS+=("-t")
fi

# Here we do /usr/bin/env sh rather than exec sh to avoid adding this command
# to the login shell's history.
ENCODED_BA=$(printf %s "$BOOLEAN_ARGS" | base64_encode)

# If ssh gets a signal, let it2ssh keep running.
set +e

$SSH \
"${USER_ARGS[@]}" \
-- \
"$HOSTNAME" \
exec \
sh \
-c \
"$eval_cmd" \
\'"$sanitized main $TOKEN ${UNIQUEID} $ENCODED_BA $SSHARGS"\'

print_osc
printf "1337;EndSSH=%s" "${UNIQUEID}"
print_st

